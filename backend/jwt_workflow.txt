üîπ Workflow of JWT
1Ô∏è‚É£ User Logs In ‚Üí Login controller generates a JWT token and sends it to the frontend.
2Ô∏è‚É£ Frontend Stores Token ‚Üí Token is saved in localStorage or httpOnly cookies.
3Ô∏è‚É£ User Makes API Calls ‚Üí Token is sent in the Authorization header as Bearer <token>.
4Ô∏è‚É£ Backend Verifies Token ‚Üí Uses the JWT secret key (without checking DB) to decode and validate it.
5Ô∏è‚É£ Token is Unique ‚Üí Typically 256+ characters, generated using a secret/private key.
6Ô∏è‚É£ Each Token is Different ‚Üí Every login generates a completely new JWT, even for the same user.
7Ô∏è‚É£ Token Expiry ‚Üí Tokens usually expire (e.g., 15 min - 1 hour for access tokens).
8Ô∏è‚É£ Token is Lost ‚Üí If localStorage is cleared or token expires, API calls fail with 401 Unauthorized.
9Ô∏è‚É£ User is Redirected to Login ‚Üí Frontend detects missing/expired token and asks user to re-login.
üîü User Logs In Again ‚Üí New token is generated, stored, and API calls work again.

--------------------------------------------------------------------------------------------------------

üîπ Workflow of JWT with Refresh Token

1Ô∏è‚É£ User Logs In
Backend generates two tokens:

Access Token (short-lived, e.g., 15 min - 1 hour)

Refresh Token (long-lived, e.g., days/weeks)

Tokens are sent to the frontend.

2Ô∏è‚É£ Frontend Stores Tokens
Access Token ‚Üí Stored in memory or localStorage (for API calls).

Refresh Token ‚Üí Stored in httpOnly cookies (for security).

3Ô∏è‚É£ User Makes API Calls
Access Token is included in the Authorization header (Bearer <token>).

Backend verifies the token before processing the request.

4Ô∏è‚É£ How is JWT Verified (Without DB Check)?
Backend decodes the JWT using the secret key.

JWT contains:

Header (Algorithm used)

Payload (User ID, role, expiry, etc.)

Signature (Encrypted with the secret key)

If the signature matches the secret key, the token is valid.

No DB check is required, as the token itself holds all necessary user data.

5Ô∏è‚É£ Token Expiry & Refresh Mechanism
If Access Token expires, API requests fail with 401 Unauthorized.

Frontend automatically sends the Refresh Token to /refresh-token API.

Backend:

Verifies the Refresh Token (This one is stored in the DB to prevent reuse).

Issues a new Access Token if valid.

Rejects request if Refresh Token is missing, expired, or blacklisted.

6Ô∏è‚É£ If Refresh Token is Expired or Invalid
User must log in again to get new tokens.

7Ô∏è‚É£ User Logs In Again
Backend generates fresh tokens, frontend stores them, and API calls resume.
